{"version":3,"sources":["components/Ospf.jsx","components/Basic.jsx","components/Routers.jsx","App.js","index.js"],"names":["Ospf","getIPMask","useState","ospfID","setOspfID","getNetworkID","ip","mask","ipMask","address","split","networkID","value","size","getBlockSizeMask","netID","Math","floor","128","192","224","240","248","252","255","getWildcard","maskArr","maskValue","wildcard","join","className","style","padding","htmlFor","type","min","max","required","placeholder","onChange","e","target","Button","onClick","addresses","ospfText","ospf","console","log","Basic","list","routers","setRouters","hostname","setHostname","banner","setBanner","map","row","id","variant","alert","basicConfigs","navigator","clipboard","writeText","display","color","fontWeight","data","item","Routers","RoutersList","key","App","textRef","useRef","content","setContent","margin","ref","defaultValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6fa9fd4.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport './Ospf.css'\n\nconst Ospf = ({ getIPMask }) => {\n  const [ospfID, setOspfID] = useState(115)\n\n  const handleClick = () => {\n    const addresses = getIPMask()\n    let ospfText = `router ospf ${ospfID ? ospfID : '115'}\\n`\n\n    for (const address in addresses) {\n      let ospf = getNetworkID(addresses[address][1], addresses[address][2])\n      ospfText += `network ${ospf.address.join('.')} ${getWildcard(\n        ospf.mask.join('.')\n      )} area 0\\n`\n    }\n    console.log(ospfText)\n  }\n\n  const getNetworkID = (ip, mask) => {\n    const ipArr = ip.split('.')\n    const maskArr = mask.split('.')\n\n    const ipMask = {\n      address: ipArr,\n      mask: maskArr,\n    }\n\n    const networkID = { ...ipMask }\n\n    for (const value in ipMask.mask) {\n      if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\n        let size = getBlockSizeMask(ipMask.mask[value])\n        let netID = Math.floor(ipMask.address[value] / size) * size\n        networkID.address[value] = `${netID}`\n      }\n    }\n    return networkID\n  }\n\n  const getBlockSizeMask = (mask) => {\n    const blockSize = {\n      128: 128,\n      192: 64,\n      224: 32,\n      240: 16,\n      248: 8,\n      252: 4,\n      255: 1,\n    }\n    return blockSize[mask]\n  }\n\n  const getWildcard = (mask) => {\n    const maskArr = mask.split('.')\n    for (const maskValue in maskArr) {\n      if (maskArr[maskValue] !== '255') {\n        let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1\n        maskArr[maskValue] = `${wildcard}`\n      } else {\n        maskArr[maskValue] = '0'\n      }\n    }\n    return maskArr.join('.')\n  }\n\n  return (\n    <div className='m-2' style={{ padding: '2%' }}>\n      <label className='label' htmlFor='OSPF-ID'>\n        Ospf ID\n      </label>\n      <input\n        type='number'\n        className=\"ml-3 mr-3 input-number\"\n        min=\"1\"\n        max=\"255\"\n        required\n        placeholder={ospfID ? ospfID : 115}\n        onChange={(e) => setOspfID(e.target.value)}\n      />\n      <Button className=\"btn-warning\" onClick={handleClick}>\n        Copy OSPF configuration\n      </Button>\n    </div>\n  )\n}\n\nexport default Ospf\n","import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport Ospf from './Ospf'\nimport './Basic.css'\n\nconst Basic = ({ list }) => {\n  const [routers, setRouters] = useState(1)\n  const [hostname, setHostname] = useState('RR')\n  const [banner, setBanner] = useState('#Roberth Romero, SCM#')\n\n  const getIPMask = () => {\n    let rows = list.split('\\n')\n    let columns = rows.map((row) => row.split('\\t'))\n    return columns\n  }\n\n  const getInterfacesConfig = () => {\n    const addresses = getIPMask()\n    let data = ''\n\n    addresses.map(\n      (item) =>\n        (data += `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`)\n    )\n    navigator.clipboard.writeText(data)\n  }\n\n  const handleClick = () => {\n    alert('copiado');\n    setRouters(routers + 1)\n\n    let basicConfigs = `hostname ${hostname}_R${routers}\\nbanner motd ~${banner}~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`\n    navigator.clipboard.writeText(basicConfigs)\n  }\n\n  const restartHandler = () => {\n    setRouters(1)\n  }\n\n  return (\n    <div className='basic'>\n      <form>\n        <label htmlFor='hostname'>Hostname</label>\n        <input\n          className='mr-3 ml-1'\n          type='text'\n          id='hostname'\n          onChange={(e) => setHostname(e.target.value)}\n        />\n        <label htmlFor='banner'>Banner</label>\n        <input\n          className='mr-3 ml-1'\n          type='text'\n          id='banner'\n          onChange={(e) => setBanner(e.target.value)}\n        />\n      </form>\n\n      <Button variant='outline-primary ml-3 mr-5' onClick={handleClick}>\n        Configuraciones Basicas\n      </Button>\n      <p className='mt-5' style={{ display: 'inline-block' }}>\n        RouterID:{' '}\n        <span style={{ color: 'green', fontWeight: 'bolder' }}>{routers}</span>\n      </p>\n      <Button variant='outline-secondary ml-3' onClick={restartHandler}>\n        Reiniciar Router ID\n      </Button>\n      <br />\n      <Button variant='outline-success ml-3 mt-3' onClick={getInterfacesConfig}>\n        Configuracion Interfaces\n      </Button>\n      <Ospf getIPMask={getIPMask}/>\n    </div>\n  )\n}\n\nexport default Basic\n","import Basic from './Basic'\n\nconst Routers = ({ RoutersList }) => {\n  let key = 1; \n\n  return (\n    <div>\n      {RoutersList.map((item) => (item ? <Basic list={item} key={key++}  /> : true))}\n    </div>\n  )\n}\n\nexport default Routers\n","import { useRef, useState } from 'react'\nimport Routers from './components/Routers'\nimport './App.css'\n\nfunction App() {\n  const textRef = useRef()\n  const [content, setContent] = useState('')\n\n  const getRouters = () => {\n    let routers = content.split(/\\n\\s*\\n/)\n    return routers\n  }\n\n\n  return (\n    <div style={{ margin: '2%' }}>\n        <textarea\n          className='textarea'\n          ref={textRef}\n          defaultValue={`G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`}\n          onChange={(e) => setContent(e.target.value)}\n        />\n        <Routers\n          RoutersList={getRouters()}\n        />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}