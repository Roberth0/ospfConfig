{"version":3,"sources":["components/Ospf.jsx","components/Basic.jsx","components/Routers.jsx","App.js","index.js"],"names":["Ospf","getIPMask","ospfID","getNetworkID","ip","mask","ipMask","address","split","networkID","value","size","getBlockSizeMask","netID","Math","floor","128","192","224","240","248","252","255","getWildcard","maskArr","maskValue","wildcard","join","className","style","textAlign","Button","onClick","toast","success","addresses","ospfText","ospf","navigator","clipboard","writeText","Basic","list","ID","hostname","banner","useState","map","row","variant","basicConfigs","data","item","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Routers","RoutersList","key","setHostname","setBanner","setOspfID","padding","htmlFor","type","autocomplete","id","onChange","e","target","min","max","required","placeholder","display","flexWrap","App","textRef","useRef","content","setContent","showExample","setShowExample","showExampleGroup","setShowExampleGroup","example","exampleGroup","margin","ref","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7078b9e4.chunk.js","sourcesContent":["import { Button } from 'react-bootstrap'\nimport { toast } from 'react-toastify'\nimport './Ospf.css'\n\nconst Ospf = ({ getIPMask, ospfID }) => {\n\n  const handleClick = () => {\n    toast.success('🧭 OSPF Copiado');\n    const addresses = getIPMask()\n    let ospfText = `router ospf ${ospfID ? ospfID : '115'}\\n`\n\n    for (const address in addresses) {\n      let ospf = getNetworkID(addresses[address][1], addresses[address][2])\n      ospfText += `network ${ospf.address.join('.')} ${getWildcard(\n        ospf.mask.join('.')\n      )} area 0\\n`\n    }\n    \n    navigator.clipboard.writeText(ospfText)\n  }\n\n  const getNetworkID = (ip, mask) => {\n    const ipArr = ip.split('.')\n    const maskArr = mask.split('.')\n\n    const ipMask = {\n      address: ipArr,\n      mask: maskArr,\n    }\n\n    const networkID = { ...ipMask }\n\n    for (const value in ipMask.mask) {\n      if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\n        let size = getBlockSizeMask(ipMask.mask[value])\n        let netID = Math.floor(ipMask.address[value] / size) * size\n        networkID.address[value] = `${netID}`\n      }\n    }\n    return networkID\n  }\n\n  const getBlockSizeMask = (mask) => {\n    const blockSize = {\n      128: 128,\n      192: 64,\n      224: 32,\n      240: 16,\n      248: 8,\n      252: 4,\n      255: 1,\n    }\n    return blockSize[mask]\n  }\n\n  const getWildcard = (mask) => {\n    const maskArr = mask.split('.')\n    for (const maskValue in maskArr) {\n      if (maskArr[maskValue] !== '255') {\n        let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1\n        maskArr[maskValue] = `${wildcard}`\n      } else {\n        maskArr[maskValue] = '0'\n      }\n    }\n    return maskArr.join('.')\n  }\n\n  return (\n    <div className=\"\" style={{textAlign: 'center' }}>\n      <Button className=\"btn-warning\" onClick={handleClick}>\n        Copiar OSPF\n      </Button>\n    </div>\n  )\n}\n\nexport default Ospf\n","import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport Ospf from './Ospf'\nimport './Basic.css'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst Basic = ({ list, ID, hostname, banner, ospfID }) => {\n  const [routers, setRouters] = useState(1)\n\n  const getIPMask = () => {\n    let rows = list.split('\\n')\n    let columns = rows.map((row) => row.split('\\t'))\n    return columns\n  }\n\n  const getInterfacesConfig = () => {\n    toast.success('⚙️ Interfaces Copiado!');\n    const addresses = getIPMask()\n    let data = ''\n\n    addresses.map(\n      (item) =>\n        (data += `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`)\n    )\n    navigator.clipboard.writeText(data)\n  }\n\n  const handleClick = () => {\n    toast.success('⌨️  Copiado!')\n    // setRouters(routers + 1)\n\n    let basicConfigs = `hostname ${hostname}_R${ID}\\nbanner motd ~${banner}~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`\n    navigator.clipboard.writeText(basicConfigs)\n  }\n\n  // const restartHandler = () => {\n  //   setRouters(1)\n  //   toast.info('Router ID Reseteado!');\n  // }\n\n  return (\n    <div className='basic'>\n       <p className=\"router-id\"> 🤖R{ID}</p>\n      <Button variant='outline-primary' onClick={handleClick}>\n        Configuraciones Basicas\n      </Button>\n     \n      <Button variant='outline-success' onClick={getInterfacesConfig}>\n        Configuracion Interfaces\n      </Button>\n      <Ospf getIPMask={getIPMask} ospfID={ospfID}/>\n      <ToastContainer\n        position='top-right'\n        theme='light'\n        autoClose={2500}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />{' '}\n    </div>\n  )\n}\n\nexport default Basic\n","import { useState } from 'react'\nimport Basic from './Basic'\n\nconst Routers = ({ RoutersList }) => {\n  let key = 1\n  let ID = 1\n\n  const [hostname, setHostname] = useState('AA')\n  const [banner, setBanner] = useState('#Your custom banner here#')\n  const [ospfID, setOspfID] = useState(115)\n\n  return (\n    <>\n      <div\n        style={{\n          padding: '2%',\n          textAlign: 'center'\n        }}\n      >\n        <form>\n          <label htmlFor='hostname'>Hostname</label>\n          <input\n            className='mr-3 ml-1'\n            type='text'\n            autocomplete=\"off\"\n            id='hostname'\n            onChange={(e) => setHostname(e.target.value)}\n          />\n          <label htmlFor='banner'>Banner</label>\n          <input\n            className='mr-3 ml-1'\n            type='text'\n            id='banner'\n            autocomplete=\"off\"\n            onChange={(e) => setBanner(e.target.value)}\n          />\n          <label className='label' htmlFor='OSPF-ID'>\n            Ospf ID\n          </label>\n          <input\n            type='number'\n            className='ml-3 mr-3 input-number'\n            min='1'\n            max='255'\n            autocomplete=\"off\"\n            required\n            placeholder={ospfID ? ospfID : 115}\n            onChange={(e) => setOspfID(e.target.value)}\n          />\n        </form>\n      </div>\n\n      <div style={{ display: \"flex\", flexWrap: 'wrap'}}>\n        {RoutersList.map((item) =>\n          item ? (\n            <Basic\n              list={item}\n              key={key++}\n              ID={ID++}\n              hostname={hostname}\n              banner={banner}\n              ospfID={ospfID}\n            />\n          ) : (\n            true\n          )\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default Routers\n","import { useRef, useState } from \"react\";\nimport Routers from \"./components/Routers\";\nimport \"./App.css\";\nimport { Button } from \"react-bootstrap\";\n\nfunction App() {\n  const textRef = useRef();\n  const [content, setContent] = useState(\"\");\n  const [showExample, setShowExample] = useState(true);\n  const [showExampleGroup, setShowExampleGroup] = useState(true);\n\n  const example = `G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`;\n  const exampleGroup = `G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\n\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`;\n  const getRouters = () => {\n    let routers = content.split(/\\n\\s*\\n/);\n    return routers;\n  };\n\n  return (\n    <div style={{ margin: \"2%\" }}>\n      <textarea\n        className=\"textarea\"\n        placeholder=\"Pegar tabla de direccionamiento formato 'G0/0 172.16.70.1 255.255.255.240'\"\n        ref={textRef}\n        onChange={(e) => setContent(e.target.value)}\n      />\n\n      {showExample && (\n        <Button\n          className=\"mr-2 mt-3\"\n          variant=\"primary\"\n          onClick={() => {\n            textRef.current.value = example;\n            setContent(example);\n            setShowExample(!showExample);\n          }}\n        >\n          Ejemplo Router\n        </Button>\n      )}\n\n      {showExampleGroup && showExample && (\n        <Button\n          className=\"ml-2 mt-3\"\n          variant=\"primary-success\"\n          onClick={() => {\n            textRef.current.value = exampleGroup;\n            setContent(exampleGroup);\n            setShowExampleGroup(!showExampleGroup);\n            setShowExample(!showExample);\n          }}\n        >\n          Ejemplo Varios Routers\n        </Button>\n      )}\n\n      {!showExample && <Routers RoutersList={getRouters()} />}\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}