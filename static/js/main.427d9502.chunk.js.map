{"version":3,"sources":["components/Basic.jsx","App.js","index.js"],"names":["Basic","_useState","useState","_useState2","_slicedToArray","routers","setRouters","_useState3","_useState4","hostname","setHostname","_jsxs","children","_jsx","htmlFor","type","id","onChange","e","target","value","onClick","basicConfigs","concat","navigator","clipboard","writeText","style","color","fontWeight","App","textRef","useRef","getNetworkID","ip","mask","ipMask","split","networkID","_objectSpread","size","getBlockSizeMask","netID","Math","floor","address","getWildcard","maskArr","maskValue","wildcard","join","ref","rows","cols","addresses","current","map","row","data","item","ospf","console","log","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.427d9502.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst Basic = () => {\r\n\r\n  const [routers, setRouters] = useState(0);\r\n  const [hostname, setHostname] = useState(\"RR\");\r\n  \r\n  \r\n  const handleClick = () => {\r\n    setRouters(routers + 1);\r\n\r\n    let basicConfigs = `hostname ${hostname}_R${routers}\\nbanner motd ~#Roberth Romero, SCM#~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`;\r\n    navigator.clipboard.writeText(basicConfigs);\r\n  }\r\n\r\n  const restartHandler = () => {\r\n    setRouters(0);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <form>\r\n        <label htmlFor=\"hostname\">Hostname</label>\r\n        <input type=\"text\" id=\"hostname\" onChange={ e => setHostname(e.target.value) }/> \r\n      </form>\r\n\r\n      <button onClick={handleClick}>Copy Basic Config</button>\r\n      <button onClick={restartHandler}>Restart Router ID</button>\r\n      <p>RouterID: <span style={{color: \"green\", fontWeight: \"bolder\"}}>{routers}</span></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Basic\r\n","\r\nimport { useState, useRef } from 'react';\r\nimport Basic from './components/Basic';\r\n\r\nfunction App() {\r\n    const textRef = useRef();\r\n\r\n    const getIPMask = () => {\r\n        let rows = textRef.current.value.split(\"\\n\");\r\n        let columns = rows.map(row => row.split(\"\\t\"));\r\n        return columns  \r\n    }\r\n\r\n    const handleClick = () => {\r\n        const addresses = getIPMask();\r\n        let data = \"\";\r\n\r\n        addresses.map( item => data += \r\n            `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`\r\n        );\r\n        navigator.clipboard.writeText(data);\r\n\r\n       for (const address in addresses) {\r\n        let ospf =  getNetworkID(addresses[address][1], addresses[address][2]);\r\n        console.log(`network ${ospf.address.join(\".\")} ${getWildcard(ospf.mask.join(\".\"))} area 0`)\r\n       }\r\n    }\r\n\r\n    const getNetworkID = (ip, mask) => {\r\n      const ipArr = ip.split(\".\");\r\n      const maskArr = mask.split(\".\");\r\n\r\n      const ipMask = {\r\n       \"address\": ipArr,\r\n       \"mask\": maskArr,\r\n      }\r\n\r\n      const networkID = {...ipMask};\r\n\r\n      for (const value in ipMask.mask) {\r\n        if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\r\n          let size = getBlockSizeMask(ipMask.mask[value]);\r\n          let netID = Math.floor(ipMask.address[value] / size) * size;\r\n          networkID.address[value] = `${netID}`;\r\n        }\r\n      }\r\n      \r\n      return networkID\r\n    }\r\n\r\n    const getBlockSizeMask = mask => {\r\n      const blockSize = {\r\n        \"128\": 128,\r\n        \"192\": 64,\r\n        \"224\": 32,\r\n        \"240\": 16,\r\n        \"248\": 8,\r\n        \"252\": 4,\r\n        \"255\": 1, \r\n      }\r\n      return blockSize[mask]\r\n    }\r\n\r\n    const getWildcard = mask => {\r\n      const maskArr = mask.split(\".\");\r\n      for(const maskValue in maskArr) {\r\n        if( maskArr[maskValue] !== '255' ) {\r\n          let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1;\r\n          maskArr[maskValue] = `${wildcard}`\r\n        } else {\r\n          maskArr[maskValue] = '0';\r\n        }\r\n      }\r\n      return maskArr.join(\".\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea\r\n                ref={textRef}\r\n                rows=\"30\"\r\n                cols=\"150\"\r\n                value={`G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`}\r\n            />\r\n            <Basic/>\r\n            <button onClick={handleClick}>\r\n              Copy Interfaces Configuration\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}