{"version":3,"sources":["components/Basic.jsx","App.js","index.js"],"names":["Basic","useState","routers","setRouters","hostname","setHostname","htmlFor","type","id","onChange","e","target","value","onClick","basicConfigs","navigator","clipboard","writeText","style","color","fontWeight","App","textRef","useRef","getNetworkID","ip","mask","ipMask","split","networkID","size","getBlockSizeMask","netID","Math","floor","address","getWildcard","maskArr","maskValue","wildcard","join","backgroundColor","ref","rows","cols","addresses","current","map","row","data","item","ospf","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAiCeA,EA/BD,WAAO,IAAD,EAEYC,mBAAS,GAFrB,mBAEXC,EAFW,KAEFC,EAFE,OAGcF,mBAAS,MAHvB,mBAGXG,EAHW,KAGDC,EAHC,KAiBlB,OACE,gCACE,iCACE,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,KAAK,OAAOC,GAAG,WAAWC,SAAW,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOC,aAGxE,wBAAQC,QAlBQ,WAClBV,EAAWD,EAAU,GAErB,IAAIY,EAAY,mBAAeV,EAAf,aAA4BF,EAA5B,qOAChBa,UAAUC,UAAUC,UAAUH,IAc5B,+BACA,wBAAQD,QAZW,WACrBV,EAAW,IAWT,+BACA,2CAAa,sBAAMe,MAAO,CAACC,MAAO,QAASC,WAAY,UAA1C,SAAsDlB,WCgE1DmB,MAxFf,WACI,IAAMC,EAAUC,mBAuBVC,EAAe,SAACC,EAAIC,GACxB,IAGMC,EAAS,CACd,QAJaF,EAAGG,MAAM,KAKtB,KAJeF,EAAKE,MAAM,MAOrBC,EAAS,eAAOF,GAEtB,IAAK,IAAMf,KAASe,EAAOD,KACzB,GAA2B,QAAvBC,EAAOD,KAAKd,IAA2C,MAAvBe,EAAOD,KAAKd,GAAgB,CAC9D,IAAIkB,EAAOC,EAAiBJ,EAAOD,KAAKd,IACpCoB,EAAQC,KAAKC,MAAMP,EAAOQ,QAAQvB,GAASkB,GAAQA,EACvDD,EAAUM,QAAQvB,GAAlB,UAA8BoB,GAIlC,OAAOH,GAGHE,EAAmB,SAAAL,GAUvB,MATkB,CAChB,IAAO,IACP,IAAO,GACP,IAAO,GACP,IAAO,GACP,IAAO,EACP,IAAO,EACP,IAAO,GAEQA,IAGbU,EAAc,SAAAV,GAClB,IAAMW,EAAUX,EAAKE,MAAM,KAC3B,IAAI,IAAMU,KAAaD,EACrB,GAA2B,QAAvBA,EAAQC,GAAuB,CACjC,IAAIC,EAAWR,EAAiBM,EAAQC,IAAc,EACtDD,EAAQC,GAAR,UAAwBC,QAExBF,EAAQC,GAAa,IAGzB,OAAOD,EAAQG,KAAK,MAGtB,OACI,sBAAKtB,MAAO,CAACuB,gBAAiB,QAA9B,UACI,0BACIC,IAAKpB,EACLqB,KAAK,KACLC,KAAK,MACLhC,MAAK,sJAET,cAAC,EAAD,IACA,wBAAQC,QAxEI,WAChB,IAAMgC,EANKvB,EAAQwB,QAAQlC,MAAMgB,MAAM,MACpBmB,KAAI,SAAAC,GAAG,OAAIA,EAAIpB,MAAM,SAMpCqB,EAAO,GAOZ,IAAK,IAAMd,KALVU,EAAUE,KAAK,SAAAG,GAAI,OAAID,GAAI,oBACVC,EAAK,GADK,wBACaA,EAAK,GADlB,YACwBA,EAAK,GAD7B,sBAG3BnC,UAAUC,UAAUC,UAAUgC,GAETJ,EAAW,CAChC,IAAIM,EAAQ3B,EAAaqB,EAAUV,GAAS,GAAIU,EAAUV,GAAS,IACnEiB,QAAQC,IAAR,kBAAuBF,EAAKhB,QAAQK,KAAK,KAAzC,YAAiDJ,EAAYe,EAAKzB,KAAKc,KAAK,MAA5E,cA6DI,+CChFZc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce6752b5.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst Basic = () => {\n\n  const [routers, setRouters] = useState(0);\n  const [hostname, setHostname] = useState(\"RR\");\n  \n  \n  const handleClick = () => {\n    setRouters(routers + 1);\n\n    let basicConfigs = `hostname ${hostname}_R${routers}\\nbanner motd ~#Roberth Romero, SCM#~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`;\n    navigator.clipboard.writeText(basicConfigs);\n  }\n\n  const restartHandler = () => {\n    setRouters(0);\n  }\n  \n  return (\n    <div>\n      <form>\n        <label htmlFor=\"hostname\">Hostname</label>\n        <input type=\"text\" id=\"hostname\" onChange={ e => setHostname(e.target.value) }/> \n      </form>\n\n      <button onClick={handleClick}>Copy Basic Config</button>\n      <button onClick={restartHandler}>Restart Router ID</button>\n      <p>RouterID: <span style={{color: \"green\", fontWeight: \"bolder\"}}>{routers}</span></p>\n    </div>\n  )\n}\n\nexport default Basic\n","\nimport { useState, useRef } from 'react';\nimport Basic from './components/Basic';\n\nfunction App() {\n    const textRef = useRef();\n\n    const getIPMask = () => {\n        let rows = textRef.current.value.split(\"\\n\");\n        let columns = rows.map(row => row.split(\"\\t\"));\n        return columns  \n    }\n\n    const handleClick = () => {\n        const addresses = getIPMask();\n        let data = \"\";\n\n        addresses.map( item => data += \n            `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`\n        );\n        navigator.clipboard.writeText(data);\n\n       for (const address in addresses) {\n        let ospf =  getNetworkID(addresses[address][1], addresses[address][2]);\n        console.log(`network ${ospf.address.join(\".\")} ${getWildcard(ospf.mask.join(\".\"))} area 0`)\n       }\n    }\n\n    const getNetworkID = (ip, mask) => {\n      const ipArr = ip.split(\".\");\n      const maskArr = mask.split(\".\");\n\n      const ipMask = {\n       \"address\": ipArr,\n       \"mask\": maskArr,\n      }\n\n      const networkID = {...ipMask};\n\n      for (const value in ipMask.mask) {\n        if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\n          let size = getBlockSizeMask(ipMask.mask[value]);\n          let netID = Math.floor(ipMask.address[value] / size) * size;\n          networkID.address[value] = `${netID}`;\n        }\n      }\n      \n      return networkID\n    }\n\n    const getBlockSizeMask = mask => {\n      const blockSize = {\n        \"128\": 128,\n        \"192\": 64,\n        \"224\": 32,\n        \"240\": 16,\n        \"248\": 8,\n        \"252\": 4,\n        \"255\": 1, \n      }\n      return blockSize[mask]\n    }\n\n    const getWildcard = mask => {\n      const maskArr = mask.split(\".\");\n      for(const maskValue in maskArr) {\n        if( maskArr[maskValue] !== '255' ) {\n          let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1;\n          maskArr[maskValue] = `${wildcard}`\n        } else {\n          maskArr[maskValue] = '0';\n        }\n      }\n      return maskArr.join(\".\");\n    }\n\n    return (\n        <div style={{backgroundColor: \"#ddd\"}}>\n            <textarea\n                ref={textRef}\n                rows=\"30\"\n                cols=\"150\"\n                value={`G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`}\n            />\n            <Basic/>\n            <button onClick={handleClick}>\n              Copy Interfaces Configuration\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}