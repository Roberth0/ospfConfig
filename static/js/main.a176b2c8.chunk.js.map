{"version":3,"sources":["components/Basic.jsx","components/Ospf.jsx","App.js","index.js"],"names":["Basic","useState","routers","setRouters","hostname","setHostname","banner","setBanner","className","htmlFor","type","id","onChange","e","target","value","Button","variant","onClick","basicConfigs","navigator","clipboard","writeText","style","color","fontWeight","Ospf","getIPMask","ospfID","setOspfID","getNetworkID","ip","mask","ipMask","address","split","networkID","size","getBlockSizeMask","netID","Math","floor","128","192","224","240","248","252","255","getWildcard","maskArr","maskValue","wildcard","join","backgroundColor","padding","addresses","ospfText","ospf","console","log","App","textRef","useRef","current","map","row","margin","ref","rows","cols","defaultValue","data","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a176b2c8.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport './Basic.css';\n\nconst Basic = () => {\n\n  const [routers, setRouters] = useState(0);\n  const [hostname, setHostname] = useState(\"RR\");\n  const [banner, setBanner] = useState(\"#Roberth Romero, SCM#\");\n  \n  \n  const handleClick = () => {\n    setRouters(routers + 1);\n\n    let basicConfigs = `hostname ${hostname}_R${routers}\\nbanner motd ~${banner}~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`;\n    navigator.clipboard.writeText(basicConfigs);\n  }\n\n  const restartHandler = () => {\n    setRouters(0);\n  }\n  \n  return (\n    <div className=\"basic\">\n      <form>\n        <label htmlFor=\"hostname\">Hostname</label>\n        <input type=\"text\" id=\"hostname\" onChange={ e => setHostname(e.target.value) }/> \n        <label htmlFor=\"banner\">Banner</label>\n        <input type=\"text\" id=\"banner\" onChange={ e => setBanner(e.target.value)}/>\n      </form>\n\n      <Button variant=\"outline-primary\" onClick={handleClick}>Copy Basic Config</Button>\n      <Button variant=\"outline-secondary\" onClick={restartHandler}>Restart Router ID</Button>\n      <p>RouterID: <span style={{color: \"green\", fontWeight: \"bolder\"}}>{routers}</span></p>\n    </div>\n  )\n}\n\nexport default Basic\n","import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport './Ospf.css'\n\nconst Ospf = ({ getIPMask }) => {\n  const [ospfID, setOspfID] = useState(115)\n\n  const handleClick = () => {\n    const addresses = getIPMask()\n    let ospfText = `router ospf ${ospfID ? ospfID : '115'}\\n`\n\n    for (const address in addresses) {\n      let ospf = getNetworkID(addresses[address][1], addresses[address][2])\n      ospfText += `network ${ospf.address.join('.')} ${getWildcard(\n        ospf.mask.join('.')\n      )} area 0\\n`\n    }\n    console.log(ospfText)\n  }\n\n  const getNetworkID = (ip, mask) => {\n    const ipArr = ip.split('.')\n    const maskArr = mask.split('.')\n\n    const ipMask = {\n      address: ipArr,\n      mask: maskArr,\n    }\n\n    const networkID = { ...ipMask }\n\n    for (const value in ipMask.mask) {\n      if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\n        let size = getBlockSizeMask(ipMask.mask[value])\n        let netID = Math.floor(ipMask.address[value] / size) * size\n        networkID.address[value] = `${netID}`\n      }\n    }\n    return networkID\n  }\n\n  const getBlockSizeMask = (mask) => {\n    const blockSize = {\n      128: 128,\n      192: 64,\n      224: 32,\n      240: 16,\n      248: 8,\n      252: 4,\n      255: 1,\n    }\n    return blockSize[mask]\n  }\n\n  const getWildcard = (mask) => {\n    const maskArr = mask.split('.')\n    for (const maskValue in maskArr) {\n      if (maskArr[maskValue] !== '255') {\n        let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1\n        maskArr[maskValue] = `${wildcard}`\n      } else {\n        maskArr[maskValue] = '0'\n      }\n    }\n    return maskArr.join('.')\n  }\n\n  return (\n    <div className='ospf' style={{ backgroundColor: '#709acc', padding: '2%' }}>\n      <label className='label' htmlFor='OSPF-ID'>\n        Ospf ID\n      </label>\n      <input\n        id='OSPF-ID'\n        type='number'\n        onChange={(e) => setOspfID(e.target.value)}\n      />\n      <Button className='btn' onClick={handleClick}>\n        Copy OSPF configuration\n      </Button>\n    </div>\n  )\n}\n\nexport default Ospf\n","import { useRef } from 'react'\nimport Basic from './components/Basic'\nimport Ospf from './components/Ospf'\nimport Button from 'react-bootstrap/Button'\n\nfunction App() {\n  const textRef = useRef()\n\n  const getIPMask = () => {\n    let rows = textRef.current.value.split('\\n')\n    let columns = rows.map((row) => row.split('\\t'))\n    return columns\n  }\n\n  const handleClick = () => {\n    const addresses = getIPMask()\n    let data = ''\n\n    addresses.map(\n      (item) =>\n        (data += `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`)\n    )\n    navigator.clipboard.writeText(data)\n  }\n\n  return (\n    <div style={{ margin: '2%' }}>\n      <textarea\n        ref={textRef}\n        rows='30'\n        cols='160'\n        defaultValue={`G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`}\n      />\n      <Basic />\n      <Button variant='primary' onClick={handleClick}>\n        Copy Interfaces Configuration\n      </Button>\n      <Ospf getIPMask={getIPMask} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}