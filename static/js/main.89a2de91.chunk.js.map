{"version":3,"sources":["components/Ospf.jsx","components/Basic.jsx","components/Routers.jsx","App.js","index.js"],"names":["Ospf","getIPMask","useState","ospfID","setOspfID","getNetworkID","ip","mask","ipMask","address","split","networkID","value","size","getBlockSizeMask","netID","Math","floor","128","192","224","240","248","252","255","getWildcard","maskArr","maskValue","wildcard","join","className","style","padding","htmlFor","type","min","max","required","placeholder","onChange","e","target","Button","onClick","toast","success","addresses","ospfText","ospf","navigator","clipboard","writeText","Basic","list","ID","routers","setRouters","hostname","setHostname","banner","setBanner","map","row","id","variant","basicConfigs","display","color","fontWeight","info","data","item","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Routers","RoutersList","key","App","textRef","useRef","content","setContent","showExample","setShowExample","showExampleGroup","setShowExampleGroup","example","exampleGroup","margin","ref","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SA2FeA,EAtFF,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACFC,mBAAS,KADP,mBACvBC,EADuB,KACfC,EADe,KAkBxBC,EAAe,SAACC,EAAIC,GACxB,IAGMC,EAAS,CACbC,QAJYH,EAAGI,MAAM,KAKrBH,KAJcA,EAAKG,MAAM,MAOrBC,EAAS,eAAQH,GAEvB,IAAK,IAAMI,KAASJ,EAAOD,KACzB,GAA2B,QAAvBC,EAAOD,KAAKK,IAA2C,MAAvBJ,EAAOD,KAAKK,GAAgB,CAC9D,IAAIC,EAAOC,EAAiBN,EAAOD,KAAKK,IACpCG,EAAQC,KAAKC,MAAMT,EAAOC,QAAQG,GAASC,GAAQA,EACvDF,EAAUF,QAAQG,GAAlB,UAA8BG,GAGlC,OAAOJ,GAGHG,EAAmB,SAACP,GAUxB,MATkB,CAChBW,IAAK,IACLC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GAEUjB,IAGbkB,EAAc,SAAClB,GACnB,IAAMmB,EAAUnB,EAAKG,MAAM,KAC3B,IAAK,IAAMiB,KAAaD,EACtB,GAA2B,QAAvBA,EAAQC,GAAsB,CAChC,IAAIC,EAAWd,EAAiBY,EAAQC,IAAc,EACtDD,EAAQC,GAAR,UAAwBC,QAExBF,EAAQC,GAAa,IAGzB,OAAOD,EAAQG,KAAK,MAGtB,OACE,sBAAKC,UAAU,MAAMC,MAAO,CAAEC,QAAS,MAAvC,UACE,uBAAOF,UAAU,QAAQG,QAAQ,UAAjC,qBAGA,uBACEC,KAAK,SACLJ,UAAU,yBACVK,IAAI,IACJC,IAAI,MACJC,UAAQ,EACRC,YAAanC,GAAkB,IAC/BoC,SAAU,SAACC,GAAD,OAAOpC,EAAUoC,EAAEC,OAAO7B,UAEtC,cAAC8B,EAAA,EAAD,CAAQZ,UAAU,cAAca,QA5EhB,WAClBC,IAAMC,QAAQ,6BACd,IAAMC,EAAY7C,IACd8C,EAAQ,sBAAkB5C,GAAkB,MAApC,MAEZ,IAAK,IAAMM,KAAWqC,EAAW,CAC/B,IAAIE,EAAO3C,EAAayC,EAAUrC,GAAS,GAAIqC,EAAUrC,GAAS,IAClEsC,GAAQ,kBAAeC,EAAKvC,QAAQoB,KAAK,KAAjC,YAAyCJ,EAC/CuB,EAAKzC,KAAKsB,KAAK,MADT,aAKVoB,UAAUC,UAAUC,UAAUJ,IAgE5B,6BCSSK,G,YAtFD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAAS,EACApD,mBAAS,GADT,mBACvBqD,EADuB,KACdC,EADc,OAEEtD,mBAAS,MAFX,mBAEvBuD,EAFuB,KAEbC,EAFa,OAGFxD,mBAAS,yBAHP,mBAGvByD,EAHuB,KAGfC,EAHe,KAKxB3D,EAAY,WAGhB,OAFWoD,EAAK3C,MAAM,MACHmD,KAAI,SAACC,GAAD,OAASA,EAAIpD,MAAM,UA6B5C,OACE,sBAAKoB,UAAU,QAAf,UACE,uBAAMA,UAAU,YAAhB,oCAA0CwB,KAC1C,iCACE,uBAAOrB,QAAQ,WAAf,sBACA,uBACEH,UAAU,YACVI,KAAK,OACL6B,GAAG,WACHxB,SAAU,SAACC,GAAD,OAAOkB,EAAYlB,EAAEC,OAAO7B,UAExC,uBAAOqB,QAAQ,SAAf,oBACA,uBACEH,UAAU,YACVI,KAAK,OACL6B,GAAG,SACHxB,SAAU,SAACC,GAAD,OAAOoB,EAAUpB,EAAEC,OAAO7B,aAGxC,cAAC8B,EAAA,EAAD,CAAQsB,QAAQ,4BAA4BrB,QAhC5B,WAClBC,IAAMC,QAAQ,0BACdW,EAAWD,EAAU,GAErB,IAAIU,EAAY,mBAAeR,EAAf,aAA4BF,EAA5B,0BAAqDI,EAArD,iMAChBV,UAAUC,UAAUC,UAAUc,IA2B5B,qCAGA,oBAAGnC,UAAU,OAAOC,MAAO,CAAEmC,QAAS,gBAAtC,sBACY,IACV,sBAAMnC,MAAO,CAAEoC,MAAO,QAASC,WAAY,UAA3C,SAAwDb,OAE1D,cAACb,EAAA,EAAD,CAAQsB,QAAQ,yBAAyBrB,QA/BtB,WACrBa,EAAW,GACXZ,IAAMyB,KAAK,yBA6BT,iCAGA,uBACA,cAAC3B,EAAA,EAAD,CAAQsB,QAAQ,4BAA4BrB,QAvDpB,WAC1BC,IAAMC,QAAQ,oCACd,IAAMC,EAAY7C,IACdqE,EAAO,GAEXxB,EAAUe,KACR,SAACU,GAAD,OACGD,GAAI,oBAAiBC,EAAK,GAAtB,wBAAwCA,EAAK,GAA7C,YAAmDA,EAAK,GAAxD,sBAETtB,UAAUC,UAAUC,UAAUmB,IA8C5B,sCAGA,cAAC,EAAD,CAAMrE,UAAWA,IACjB,cAAC,IAAD,CACEuE,SAAS,YACTC,MAAM,QACNC,UAAW,KACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IACX,SC3EMC,EAXC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACbC,EAAM,EACN9B,EAAK,EAET,OACE,8BACG6B,EAAYtB,KAAI,SAACU,GAAD,OAAWA,GAAO,cAAC,EAAD,CAAOlB,KAAMkB,EAAkBjB,GAAIA,KAAX8B,W,MC4BlDC,MA/Bf,WACE,IAAMC,EAAUC,mBADH,EAEiBrF,mBAAS,IAF1B,mBAENsF,EAFM,KAEGC,EAFH,OAGyBvF,oBAAS,GAHlC,mBAGNwF,EAHM,KAGOC,EAHP,OAImCzF,oBAAS,GAJ5C,mBAIN0F,EAJM,KAIYC,EAJZ,KAMPC,EAAO,oJACPC,EAAY,sJAOlB,OACE,sBAAKhE,MAAO,CAAEiE,OAAQ,MAAtB,UACI,0BACElE,UAAU,WACVQ,YAAY,6EACZ2D,IAAKX,EACL/C,SAAU,SAACC,GAAD,OAAOiD,EAAWjD,EAAEC,OAAO7B,UAExC8E,GAAe,cAAChD,EAAA,EAAD,CAAQZ,UAAU,YAAYkC,QAAQ,UAAUrB,QAAS,WAAO2C,EAAQY,QAAQtF,MAAQkF,EAASL,EAAWK,GAAUH,GAAgBD,IAAtI,4BACfE,GAAoBF,GAAe,cAAChD,EAAA,EAAD,CAAQZ,UAAU,YAAYkC,QAAQ,kBAAkBrB,QAAS,WAAO2C,EAAQY,QAAQtF,MAAQmF,EAAcN,EAAWM,GAAeF,GAAqBD,GAAmBD,GAAgBD,IAAhM,oCAClC,cAAC,EAAD,CACEP,YAhBQK,EAAQ9E,MAAM,iBCThCyF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.89a2de91.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { toast } from 'react-toastify'\nimport './Ospf.css'\n\nconst Ospf = ({ getIPMask }) => {\n  const [ospfID, setOspfID] = useState(115)\n\n  const handleClick = () => {\n    toast.success('🧭 OSPF Copiado');\n    const addresses = getIPMask()\n    let ospfText = `router ospf ${ospfID ? ospfID : '115'}\\n`\n\n    for (const address in addresses) {\n      let ospf = getNetworkID(addresses[address][1], addresses[address][2])\n      ospfText += `network ${ospf.address.join('.')} ${getWildcard(\n        ospf.mask.join('.')\n      )} area 0\\n`\n    }\n    \n    navigator.clipboard.writeText(ospfText)\n  }\n\n  const getNetworkID = (ip, mask) => {\n    const ipArr = ip.split('.')\n    const maskArr = mask.split('.')\n\n    const ipMask = {\n      address: ipArr,\n      mask: maskArr,\n    }\n\n    const networkID = { ...ipMask }\n\n    for (const value in ipMask.mask) {\n      if (ipMask.mask[value] !== '255' && ipMask.mask[value] !== '0') {\n        let size = getBlockSizeMask(ipMask.mask[value])\n        let netID = Math.floor(ipMask.address[value] / size) * size\n        networkID.address[value] = `${netID}`\n      }\n    }\n    return networkID\n  }\n\n  const getBlockSizeMask = (mask) => {\n    const blockSize = {\n      128: 128,\n      192: 64,\n      224: 32,\n      240: 16,\n      248: 8,\n      252: 4,\n      255: 1,\n    }\n    return blockSize[mask]\n  }\n\n  const getWildcard = (mask) => {\n    const maskArr = mask.split('.')\n    for (const maskValue in maskArr) {\n      if (maskArr[maskValue] !== '255') {\n        let wildcard = getBlockSizeMask(maskArr[maskValue]) - 1\n        maskArr[maskValue] = `${wildcard}`\n      } else {\n        maskArr[maskValue] = '0'\n      }\n    }\n    return maskArr.join('.')\n  }\n\n  return (\n    <div className='m-2' style={{ padding: '2%' }}>\n      <label className='label' htmlFor='OSPF-ID'>\n        Ospf ID\n      </label>\n      <input\n        type='number'\n        className=\"ml-3 mr-3 input-number\"\n        min=\"1\"\n        max=\"255\"\n        required\n        placeholder={ospfID ? ospfID : 115}\n        onChange={(e) => setOspfID(e.target.value)}\n      />\n      <Button className=\"btn-warning\" onClick={handleClick}>\n        Copiar OSPF\n      </Button>\n    </div>\n  )\n}\n\nexport default Ospf\n","import { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport Ospf from './Ospf'\nimport './Basic.css'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst Basic = ({ list, ID }) => {\n  const [routers, setRouters] = useState(1)\n  const [hostname, setHostname] = useState('RR')\n  const [banner, setBanner] = useState('#Roberth Romero, SCM#')\n\n  const getIPMask = () => {\n    let rows = list.split('\\n')\n    let columns = rows.map((row) => row.split('\\t'))\n    return columns\n  }\n\n  const getInterfacesConfig = () => {\n    toast.success('⚙️ Interfaces Copiado!');\n    const addresses = getIPMask()\n    let data = ''\n\n    addresses.map(\n      (item) =>\n        (data += `interface ${item[0]}\\nip address ${item[1]} ${item[2]}\\nno shutdown\\n`)\n    )\n    navigator.clipboard.writeText(data)\n  }\n\n  const handleClick = () => {\n    toast.success('⌨️  Copiado!')\n    setRouters(routers + 1)\n\n    let basicConfigs = `hostname ${hostname}_R${routers}\\nbanner motd ~${banner}~\\nusername cisco password cisco\\nservice password-encryption\\nno ip domain-lookup\\nip domain name cisco.com\\ncrypto key generate rsa\\n1024\\nline vty 0 4\\ntransport input ssh\\nlogin local\\n`\n    navigator.clipboard.writeText(basicConfigs)\n  }\n\n  const restartHandler = () => {\n    setRouters(1)\n    toast.info('Router ID Reseteado!');\n  }\n\n  return (\n    <div className='basic'>\n      <span className=\"router-id\"> 🤖 Router:  {ID}</span>\n      <form>\n        <label htmlFor='hostname'>Hostname</label>\n        <input\n          className='mr-3 ml-1'\n          type='text'\n          id='hostname'\n          onChange={(e) => setHostname(e.target.value)}\n        />\n        <label htmlFor='banner'>Banner</label>\n        <input\n          className='mr-3 ml-1'\n          type='text'\n          id='banner'\n          onChange={(e) => setBanner(e.target.value)}\n        />\n      </form>\n      <Button variant='outline-primary ml-3 mr-5' onClick={handleClick}>\n        Configuraciones Basicas\n      </Button>\n      <p className='mt-5' style={{ display: 'inline-block' }}>\n        RouterID:{' '}\n        <span style={{ color: 'green', fontWeight: 'bolder' }}>{routers}</span>\n      </p>\n      <Button variant='outline-secondary ml-3' onClick={restartHandler}>\n        Reiniciar Router ID\n      </Button>\n      <br />\n      <Button variant='outline-success ml-3 mt-3' onClick={getInterfacesConfig}>\n        Configuracion Interfaces\n      </Button>\n      <Ospf getIPMask={getIPMask} />\n      <ToastContainer\n        position='top-right'\n        theme='light'\n        autoClose={2500}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />{' '}\n    </div>\n  )\n}\n\nexport default Basic\n","import Basic from './Basic'\n\nconst Routers = ({ RoutersList }) => {\n  let key = 1; \n  let ID = 1;\n\n  return (\n    <div>\n      {RoutersList.map((item) => (item ? <Basic list={item} key={key++} ID={ID++}  /> : true))}\n    </div>\n  )\n}\n\nexport default Routers\n","import { useRef, useState } from 'react'\nimport Routers from './components/Routers'\nimport './App.css'\nimport { Button } from 'react-bootstrap'\n\nfunction App() {\n  const textRef = useRef()\n  const [content, setContent] = useState('')\n  const [showExample, setShowExample] = useState(true);\n  const [showExampleGroup, setShowExampleGroup] = useState(true);\n\n  const example = `G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`\n  const exampleGroup = `G0/0\\t172.16.65.1\\t255.255.255.240\\nG1/0\\t172.16.65.17\\t255.255.255.240\\n\\nG2/0\\t172.16.65.34\\t255.255.255.240\\nG3/0\\t172.16.65.98\\t255.255.255.240`\n  const getRouters = () => {\n    let routers = content.split(/\\n\\s*\\n/)\n    return routers\n  }\n\n\n  return (\n    <div style={{ margin: '2%' }}>\n        <textarea\n          className='textarea'\n          placeholder=\"Pegar tabla de direccionamiento formato 'G0/0 172.16.70.1 255.255.255.240'\"\n          ref={textRef}\n          onChange={(e) => setContent(e.target.value)}\n        />\n      {showExample && <Button className=\"mr-2 mt-3\" variant=\"primary\" onClick={() => {textRef.current.value = example; setContent(example); setShowExample(!showExample)}}>Ejemplo Router</Button>}\n      {showExampleGroup && showExample && <Button className=\"ml-2 mt-3\" variant=\"primary-success\" onClick={() => {textRef.current.value = exampleGroup; setContent(exampleGroup); setShowExampleGroup(!showExampleGroup); setShowExample(!showExample)}}>Ejemplo Varios Routers</Button>}\n        <Routers\n          RoutersList={getRouters()}\n        />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}